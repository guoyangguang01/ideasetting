<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="482" />
    <option name="newTranslationDialogY" value="256" />
    <histories>
      <item value="Factorial Square" />
      <item value="marshal" />
      <item value="sql" />
      <item value="Around Closure" />
      <item value="Abstract Template View Resolver" />
      <item value="Tokenizer" />
      <item value="Duck Simulator" />
      <item value="Cheese" />
      <item value="Olives" />
      <item value="public String searchAdvancedKnowledge1(HttpServletRequest request, HttpServletResponse response) { Map&lt;String, String&gt; queryParam = new HashMap&lt;String, String&gt;(); Map maptotal = new HashMap(); String errorcode=&quot;&quot;; try{ String currentPage = request.getParameter(&quot;page&quot;); String rows = request.getParameter(&quot;rows&quot;); queryParam.put(&quot;currentPage&quot;, currentPage); queryParam.put(&quot;pagecount&quot;, rows); queryParam.put(&quot;operatetime_begin&quot;, request.getParameter(&quot;sd&quot;)); queryParam.put(&quot;operatetime_end&quot;, request.getParameter(&quot;ed&quot;)); String searchType = request.getParameter(&quot;searchType&quot;); 搜索内容 String keyword = request.getParameter(&quot;kw&quot;); if(StringUtils.isNotBlank(keyword)){ keyword =URLDecoder.decode(URLDecoder.decode(keyword, &quot;utf-8&quot;),&quot;utf-8&quot;); } if(keyword.equals(&quot;请输入关键字进行查询&quot;)){ keyword = &quot;请输入内容&quot;; } 保存用户的搜索记录 if (keyword !=&quot;&quot;&amp;&amp;keyword !=&quot;请输入内容&quot;){ User ermusr = ermService.currentUser(); Integer userID = ermusr.getUserID().intValue(); String urls=silverURL+&quot;apicontentsave_historysearch&quot;+userID; String kw=URLDecoder.decode(keyword,&quot;utf-8&quot;); Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;(); map.put(&quot;keyword&quot;, kw); HttpClientUtils.httpRequestToString(urls, &quot;post&quot;, map); } String sd= request.getParameter(&quot;sd&quot;); 开始时间 String ed= request.getParameter(&quot;ed&quot;); 截止时间 String mj = request.getParameter(&quot;mj&quot;); 密级 if(mj !=null&amp;&amp; !mj.equals(&quot;&quot;)){ mj = URLDecoder.decode(URLDecoder.decode(mj, &quot;utf-8&quot;), &quot;utf-8&quot;); } String fl= request.getParameter(&quot;fl&quot;); 分类 String ckv= request.getParameter(&quot;ckv&quot;); String ckv1 = request.getParameter(&quot;ckv1&quot;); String ckv2 = request.getParameter(&quot;ckv2&quot;); String rpy1 = request.getParameter(&quot;rpy1&quot;); String rpy2 = request.getParameter(&quot;rpy2&quot;); String rpy01 = request.getParameter(&quot;rpy01&quot;); String rpy02 = request.getParameter(&quot;rpy02&quot;); String depd = request.getParameter(&quot;depd&quot;); 部门id String knowContritor = request.getParameter(&quot;knowContritor&quot;); 作者 if(knowContritor !=null&amp;&amp; !knowContritor.equals(&quot;&quot;)){ knowContritor = URLDecoder.decode(URLDecoder.decode(knowContritor, &quot;utf-8&quot;), &quot;utf-8&quot;); 作者名称 StringBuilder userName=new StringBuilder(); String[] knowContritors = knowContritor.split(&quot;,&quot;); for (String userID : knowContritors) { User user = ermService.getUserByOID(Long.valueOf(userID)); userName.append(user.getRealName()).append(&quot;,&quot;); } queryParam.put(&quot;knowContritorName&quot;, userName.substring(0,userName.length()-1)); } 获取主题 String topic = request.getParameter(&quot;topic&quot;); if(topic !=null&amp;&amp; !topic.equals(&quot;&quot;)){ StringBuilder topicId=new StringBuilder(); List&lt;KmKnowledge&gt; kmKnowledges = iGenlKnowledgeService.findByIds(topic); for (KmKnowledge kmKnowledge : kmKnowledges) { topicId.append(kmKnowledge.getIndexSource()).append(&quot;,&quot;); } queryParam.put(&quot;topicKnowledgeId&quot;, topic); queryParam.put(&quot;topicId&quot;, topicId.substring(0, topicId.length()-1)); } 领域id String domain = request.getParameter(&quot;domain&quot;); queryParam.put(&quot;domain&quot;, domain); String logic = request.getParameter(&quot;logic&quot;); String logicName = request.getParameter(&quot;logicName&quot;); String logicColumns = request.getParameter(&quot;logicColumns&quot;); if(logic !=null&amp;&amp; !logic.equals(&quot;&quot;)){ logic = URLDecoder.decode(URLDecoder.decode(logic, &quot;utf-8&quot;), &quot;utf-8&quot;); } if(logicColumns !=null&amp;&amp; !logicColumns.equals(&quot;&quot;)){ logicColumns = URLDecoder.decode(URLDecoder.decode(logicColumns, &quot;utf-8&quot;), &quot;utf-8&quot;); } if(logicName !=null&amp;&amp; !logicName.equals(&quot;&quot;)){ logicName = URLDecoder.decode(URLDecoder.decode(logicName, &quot;utf-8&quot;), &quot;utf-8&quot;); } queryParam.put(&quot;startDate&quot;, sd); queryParam.put(&quot;endDate&quot;, ed); queryParam.put(&quot;security&quot;, mj); if(StringUtils.isNotBlank(depd)&amp;&amp;!depd.equals(&quot;-1&quot;)){ StringBuilder deptIds = new StringBuilder(); 获取所选择部门的所有子孙部门 String[] depts = depd.split(&quot;,&quot;); for (String deptId : depts) { Collection groups = ermService.findSubGroupsIncSelfByGroupOID(Long.valueOf(deptId), null, false); for (Object object : groups) { Group group=(Group)object; deptIds.append(group.getGroupID()).append(&quot;,&quot;); } } queryParam.put(&quot;departmentid&quot;, deptIds.substring(0,deptIds.length()-1)); } queryParam.put(&quot;knowContritor&quot;, knowContritor); queryParam.put(&quot;logic&quot;, logic); 模板id与模板扩展属性条件 add by HHY 2021-05-18 start String fieldLogic = request.getParameter(&quot;fieldLogic&quot;); String relaKnowFirstTeptIds = request.getParameter(&quot;relaKnowFirstTeptIds&quot;); if(fieldLogic !=null&amp;&amp; !fieldLogic.equals(&quot;&quot;)){ fieldLogic = URLDecoder.decode(URLDecoder.decode(fieldLogic, &quot;utf-8&quot;), &quot;utf-8&quot;); } queryParam.put(&quot;fieldLogic&quot;, fieldLogic); queryParam.put(&quot;relaKnowFirstTeptIds&quot;, relaKnowFirstTeptIds); 模板id与模板扩展属性条件 add by HHY 2021-05-18 end queryParam.put(&quot;logicName&quot;,logicName); queryParam.put(&quot;logicColumns&quot;,logicColumns); queryParam.put(&quot;advsearch&quot;, &quot;1&quot;);高级搜索标志 String kword = keyword; queryParam.put(&quot;kword&quot;, kword); keyword = URLEncoder.encode(keyword,&quot;utf-8&quot;); queryParam.put(&quot;keyword&quot;, kword); 搜索类型 1为知识 queryParam.put(&quot;searchType&quot;, searchType); queryParam.put(&quot;objectSign&quot;, &quot;k&quot;); 排序类型 String sort= request.getParameter(&quot;sort&quot;); if (StringUtils.isNotBlank(sort)) { queryParam.put(&quot;sort&quot;, sort); } end Map datamap = new HashMap(); List list = new ArrayList(); int total=0; List listret = new ArrayList(); SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); Page pageObj = searchMainService.queryAdvancedKnowledge1(queryParam); request.setAttribute(CON_PAGE, pageObj); list = pageObj.getList(); total = pageObj.getTotal(); if(list==null||list.size()==0){ errorcode=&quot;noresult&quot;; }else{ String ids=&quot;&quot;; for(int i=0;i&lt;list.size();i++){ KmKnowledge kmtmp=(KmKnowledge) list.get(i); ids += &quot;'&quot;+kmtmp.getKnowledgeId()+&quot;',&quot;; } if(ids.length()&gt;0){ ids = ids.substring(0, ids.length()-1); } List&lt;Map&lt;String,Object&gt;&gt; countlist = new ArrayList&lt;Map&lt;String,Object&gt;&gt;(); if(ids.length()&gt;0){ 知识评论次数、浏览次数、下载次数、点赞次数、收藏次数数据取solr中的数据 update by huiyang.he 2020-08-24 start countlist = searchMainDbService.queryCountsByIds(ids); 知识评论次数、浏览次数、下载次数、点赞次数、收藏次数数据取solr中的数据 update by huiyang.he 2020-08-24 start } for(int i= 0;i&lt;list.size();i++){ KmKnowledge kmtmp=(KmKnowledge) list.get(i); String pubdate=&quot;&quot;; if(kmtmp.getPublishDate()!=null) { pubdate = format.format(kmtmp.getPublishDate()); } Map informap = new HashMap(); informap.put(&quot;createdate&quot;, pubdate); informap.put(&quot;author&quot;, kmtmp.getAuthor()); 添加知识密级名称 add by huiyang.he 2020-08-25 start informap.put(&quot;secretGradeName&quot;, kmtmp.getSecretGradeName()); 添加知识密级名称 add by huiyang.he 2020-08-25 start Map&lt;String, Object&gt; countmap = null; if(countlist!=null&amp;&amp;countlist.size()&gt;0){ for(int j=0;j&lt;countlist.size();j++){ if(kmtmp.getKnowledgeId().equals(countlist.get(j).get(&quot;KNOWLEDGE_ID&quot;))){ countmap = countlist.get(j); break; } } } if(countmap!=null){ if(countmap.get(&quot;COLLECT_COUNT&quot;)!=null){ informap.put(&quot;collect_count&quot;, countmap.get(&quot;COLLECT_COUNT&quot;).toString()); } if(countmap.get(&quot;DOWNLOAD_COUNT&quot;)!=null){ informap.put(&quot;download_count&quot;,countmap.get(&quot;DOWNLOAD_COUNT&quot;).toString()); } if(countmap.get(&quot;PRAISE_COUNT&quot;)!=null){ informap.put(&quot;praise_count&quot;, countmap.get(&quot;PRAISE_COUNT&quot;).toString()); } if(countmap.get(&quot;COMMENT_COUNT&quot;)!=null){ informap.put(&quot;comment_count&quot;,countmap.get(&quot;COMMENT_COUNT&quot;).toString()); } if(countmap.get(&quot;LOOK_COUNT&quot;)!=null){ informap.put(&quot;look_count&quot;,countmap.get(&quot;LOOK_COUNT&quot;).toString()); } }else{ if(StringUtils.isNotBlank(kmtmp.getCollectCount())){ informap.put(&quot;collect_count&quot;, kmtmp.getCollectCount()); } if(StringUtils.isNotBlank(kmtmp.getDownloadCount())){ informap.put(&quot;download_count&quot;, kmtmp.getDownloadCount()); } if(StringUtils.isNotBlank(kmtmp.getPraiseCount())){ informap.put(&quot;praise_count&quot;, kmtmp.getPraiseCount()); } if(StringUtils.isNotBlank(kmtmp.getCommentCount())){ informap.put(&quot;comment_count&quot;, kmtmp.getCommentCount()); } if(StringUtils.isNotBlank(kmtmp.getLookCount())){ informap.put(&quot;look_count&quot;, kmtmp.getLookCount()); } } Map ktypemap = new HashMap(); String firstteplid = kmtmp.getFirstteplId(); if(StringUtils.isNotBlank(firstteplid)){ if(firstteplid.equals(&quot;1&quot;)){ ktypemap.put(&quot;title&quot;, &quot;工作项知识&quot;); } else if(firstteplid.equals(&quot;2&quot;)){ ktypemap.put(&quot;title&quot;, &quot;工作流知识&quot;); } else if(firstteplid.equals(&quot;3&quot;)){ ktypemap.put(&quot;title&quot;, &quot;交付物知识&quot;); }else if(firstteplid.equals(&quot;4&quot;)){ ktypemap.put(&quot;title&quot;, &quot;文档知识&quot;); }else if(firstteplid.equals(&quot;8&quot;)){ ktypemap.put(&quot;title&quot;, &quot;术语知识&quot;); }else if(firstteplid.equals(&quot;-375726&quot;)){ ktypemap.put(&quot;title&quot;, &quot;组件知识&quot;); }else if(firstteplid.equals(&quot;-375727&quot;)){ ktypemap.put(&quot;title&quot;, &quot;设计过程知识&quot;); }else { ktypemap.put(&quot;title&quot;, &quot;通用知识&quot;); } } List affixslist = new ArrayList(); Map affixsmap = new HashMap(); if(StringUtils.isNotBlank(kmtmp.getParam11())){ affixsmap.put(&quot;name&quot;, kmtmp.getParam11()); affixsmap.put(&quot;src&quot;, kmtmp.getParam10()); affixslist.add(affixsmap); } Map kmmap = new HashMap(); kmmap.put(&quot;infor&quot;, informap); kmmap.put(&quot;ktype&quot;, ktypemap); kmmap.put(&quot;affixs&quot;, affixslist); kmmap.put(&quot;title&quot;, kmtmp.getKnowledgeName()); kmmap.put(&quot;id&quot;, kmtmp.getKnowledgeId()); kmmap.put(&quot;summery&quot;, kmtmp.getSummery()); kmmap.put(&quot;source&quot;, kmtmp.getSource()); if(StringUtils.isNotBlank(kmtmp.getKeyword())&amp;&amp;StringUtils.isNotBlank(kmtmp.getAllTagNames())){ kmmap.put(&quot;keyword&quot;, kmtmp.getKeyword()+&quot;,&quot;+kmtmp.getAllTagNames()); }else if(StringUtils.isNotBlank(kmtmp.getKeyword())){ kmmap.put(&quot;keyword&quot;, kmtmp.getKeyword()); }else{ kmmap.put(&quot;keyword&quot;, kmtmp.getAllTagNames()); } kmmap.put(&quot;param5&quot;, kmtmp.getParam5()); kmmap.put(&quot;currentVersion&quot;, kmtmp.getCurrentVersion()); kmmap.put(&quot;notes&quot;, kmtmp.getDepartmentname()); kmmap.put(&quot;rnotes&quot;, kmtmp.getCname()); if (com.iwint.framework.util.km719.StringUtil.isNotEmpty(kmtmp.getKnowledgeContent())) { kmmap.put(&quot;kcontent&quot;, kmtmp.getKnowledgeContent()); } 配置附件摘要 根据知识密级与人员密级关系及公开范围与人员所在部门关系确定知识是否显示摘要等扩展信息 boolean flag = true; int knowledgeSecret = com.iwint.framework.util.km719.StringUtil.isNotEmpty(kmtmp.getSecretGrade())? Integer.valueOf(kmtmp.getSecretGrade()):1; fiexed bug 获取用户可查看知识最高密级 update by huiyang.he 2020-07-16 start int userSecret = ERMFacade.getERMService().currentUserSecretLevel(); if (knowledgeSecret &gt; userSecret) { if (knowledgeSecret &gt; Integer.valueOf(dataLevel)) { String dataLevel = ermService.currentUser().getDataLevel(); String code=ermService.getDataItemById(dataLevel).getCode(); if (knowledgeSecret &gt; Integer.valueOf(code)) { fiexed bug 获取用户可查看知识最高密级 update by huiyang.he 2020-07-16 end flag = false; } else { KmKnowledge kmKnowledge = iGenlKnowledgeService.getKmKnowledgeById(kmtmp.getKnowledgeId()); flag = findIsCanLook(kmKnowledge,&quot;VIEW&quot;); 通过知识id查询知识课件范围 List&lt;KmPrivilege&gt; kmPrivileges = IKnowledgePrivilegeService.findKmPrivilegeByknowledgeId(kmtmp.getKnowledgeId()); Set&lt;KmPrivilege&gt; set = kmtmp.getKmPrivileges(); Set&lt;String&gt; viewDeptIds = new HashSet&lt;String&gt;(); if (!kmPrivileges.isEmpty()) { for (KmPrivilege kmPrivilege : kmPrivileges) { if (&quot;VIEW_D&quot;.equals(kmPrivilege.getTypeFlag())) { viewDeptIds.add(kmPrivilege.getDeptId()); } } } String currentUserDeptId = String.valueOf(ERMFacade.getERMService().currentUsersMainGroupOID()); flag = ERMFacade.getERMService().isGroupInGroups(currentUserDeptId, viewDeptIds); } Log.error(kmtmp.getKnowledgeName()+&quot;:&quot;+flag); kmmap.put(&quot;isView&quot;, flag); listret.add(kmmap); } } datamap.put(&quot;dataType&quot;, &quot;klist&quot;); datamap.put(&quot;value&quot;, listret); maptotal.put(&quot;total&quot;, total); maptotal.put(&quot;list&quot;, datamap); }catch(Exception e){ LOGGER.error(&quot;高级搜索执行中报错&quot;,e); errorcode=&quot;nonsupport&quot;; } BizLogger bizLogger= ERMBeans.getBizLogger(); BizLog bizLog = new BizLog(&quot;用户搜索行为&quot;,BizLogTypes.OPERATION,&quot;高级搜索&quot;); Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;(); map.put(&quot;action&quot;, &quot;km_opsearch&quot;); map.put(&quot;dataID&quot;,&quot;高级检索&quot;); bizLog.setAttributeMap(map); bizLog.setOperModule(&quot;知识工程&quot;); bizLog.setSubsysCode(&quot;KM&quot;); bizLog.setOperator(ERMFacade.getERMService().currentUser().getUserName()); bizLog.setIp(ERMFacade.getERMService().currentUserIP()); bizLogger.save(bizLog); if (StringUtils.isNotBlank(errorcode)) { maptotal.put(&quot;errorcode&quot;, errorcode); } String sss = JSONArray.fromObject(maptotal).toString(); response.setContentType(&quot;texthtml&quot;); response.setCharacterEncoding(&quot;utf-8&quot;); return JSONArray.fromObject(maptotal).toString().substring(1, sss.length()-1); }" />
      <item value="dividend" />
      <item value="Turkey" />
      <item value="Mallard Duck" />
      <item value="quack" />
      <item value="Collection of useful codec, postings format and terms dictionary implementations." />
      <item value="k-Nearest Neighbor classifier" />
      <item value="Naive Bayes classifier" />
      <item value="Provides a classification module which leverages Lucene index information" />
      <item value="leverages" />
      <item value="Collection of useful codec, postings format and terms dictionary implementations" />
      <item value="Provides a classification module which leverages Lucene index information." />
      <item value="benchmark" />
      <item value="backwards compatibility codecs" />
      <item value="backwards" />
      <item value="acl" />
      <item value="ecosytem" />
      <item value="tracing capability" />
      <item value="Pluggable" />
      <item value="Built-in fault tolerance and high availability configuration options" />
      <item value="Financial grade transactional message" />
      <item value="Financial grade" />
      <item value="requestreply" />
      <item value="navigation" />
      <item value="Improving weather on the way!" />
      <item value="Watch out for cooler, rainy weather" />
      <item value="humidity" />
      <item value="Springsteen Problem" />
      <item value="Knapsack" />
      <item value="Ant Colony" />
      <item value="Simple Genetic Algorithm" />
      <item value="Simulated Annealing" />
      <item value="Mocha" />
      <item value="Espresso" />
      <item value="Soy" />
      <item value="Condiment Decorator" />
      <item value="Beverage" />
      <item value="separate" />
      <item value="synonym" />
      <item value="Strategy" />
      <item value="Wild Turkey" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="86" />
        <entry key="ENGLISH" value="88" />
        <entry key="BASQUE" value="1" />
        <entry key="DANISH" value="1" />
        <entry key="SPANISH" value="2" />
        <entry key="ITALIAN" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1640591065527" />
  </component>
  <component name="Settings">
    <option name="translateDocumentation" value="true" />
  </component>
</application>