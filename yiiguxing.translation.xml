<application>
  <component name="AppStorage">
    <histories>
      <item value="Support exists for downloading, parsing, and loading the English version of wikipedia (enwiki). The build file can automatically try to download the most current enwiki dataset (pages-articles.xml.bz2) from the &quot;latest&quot; directory, http:download.wikimedia.orgenwikilatest. However, this file doesn't always exist, depending on where wikipedia is in the dump process and whether prior dumps have succeeded. If this file doesn't exist, you can sometimes find an older or in progress version by looking in the dated directories under http:download.wikimedia.orgenwiki. For example, as of this writing, there is a page file in http:download.wikimedia.orgenwiki20070402. You can download this file manually and put it in temp. Note that the file you download will probably have the date in the name, e.g., http:download.wikimedia.orgenwiki20070402enwiki-20070402-pages-articles.xml.bz2. If you use the EnwikiContentSource then the data will be decompressed on the fly during the benchmark. If you want to benchmark indexing, you should probably decompress it beforehand using the &quot;enwiki&quot; Ant target which will produce a workenwiki.txt, after which you can use LineDocSource in your benchmark. After that, ant enwiki should process the data set and run a load test. Ant target enwiki will download, decompress, and extract (to individual files in workenwiki) the dataset, respectively." />
      <item value="Provides faceted indexing and search capabilities" />
      <item value="flush" />
      <item value="flushed" />
      <item value="assert Repository URI Is Secure" />
      <item value="is not using a secure protocol for artifacts on" />
      <item value="Be advised that shading a JAR also has implications. Shading the Commons Logging layer, for instance, means that 3rd-party logging backends need to be shaded as well" />
      <item value="In order to avoid version conflicts, the dependencies can be shaded and packaged within the client in a single JAR file (sometimes called an &quot;uber JAR&quot; or &quot;fat JAR&quot;). Shading a dependency consists of taking its content (resources files and Java class files) and renaming some of its packages before putting them in the same JAR file as the low-level Java REST client. Shading a JAR can be accomplished by 3rd-party plugins for Gradle and Maven." />
      <item value="This file is divided into 3 sections: (1) rules that we enforce. (2) rules that we would like to enforce, but haven't cleaned up the codebase to turn on yet (or we need to make the scalastyle rule more configurable). (3) rules that we don't want to enforce" />
      <item value="storage" />
      <item value="computation graphs for data analysis" />
      <item value="optimized" />
      <item value="unified" />
      <item value="The build scan was not published due to a configuration problem. The Gradle Terms of Service have not been agreed to." />
      <item value="Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0. Use '--warning-mode all' to show the individual deprecation warnings" />
      <item value="n" />
      <item value="wrapper" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="17" />
        <entry key="ENGLISH" value="18" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1610935511306" />
  </component>
  <component name="Settings">
    <option name="translateDocumentation" value="true" />
  </component>
</application>